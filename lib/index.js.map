{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAM,SAAS,sBAAf;;AAEA,IAAI,kBAAQ,QAAZ,EAAsB;AAAA;AACpB,WAAO,KAAP,CAAa,QAAb;AACA,QAAI,cAAc,SAAd,WAAc,GAAe;AAAA,UAAd,KAAc,yDAAN,CAAM;;AAC/B,UAAI,UAAU,aAAG,IAAH,GAAU,MAAxB,EAAgC;AAChC,UAAM,SAAS,kBAAQ,IAAR,CAAa,EAAE,SAAS,KAAX,EAAkB,YAAY,aAAG,IAAH,GAAU,MAAxC,EAAb,CAAf;AACA,aAAO,IAAP,CAAY,QAAZ,EAAsB,YAAM;AAC1B,eAAO,KAAP,aAAuB,OAAO,OAAP,CAAe,GAAtC,gBAAoD,KAApD;AACD,OAFD;AAGA,aAAO,IAAP,CAAY,SAAZ,EAAuB,eAAO;AAC5B,YAAI,QAAQ,cAAZ,EAA4B,WAAW;AAAA,iBAAM,YAAY,EAAE,KAAd,CAAN;AAAA,SAAX,EAAuC,IAAvC;AAC7B,OAFD;AAGD,KATD;AAUA;AAZoB;AAarB,CAbD,MAaO;AACL,MAAI,YAAY,kBAAQ;AACtB,aAAS,SAAS,QAAQ,GAAR,CAAY,OAArB,EAA8B,EAA9B,CADa;AAEtB,gBAAY,SAAS,QAAQ,GAAR,CAAY,UAArB,EAAiC,EAAjC;AAFU,GAAR,CAAhB;AAIA,YAAU,GAAV;;AAEA,YAAU,IAAV,CAAe,gBAAf,EAAiC;AAAA,WAAM,QAAQ,IAAR,CAAa,cAAb,CAAN;AAAA,GAAjC;;AAEA,SAAO,OAAP,GAAiB,SAAjB;AACD","file":"index.js","sourcesContent":["import os from 'os'\nimport cluster from 'cluster'\n\nimport Bot from './services/Bot'\nimport Logger from './services/Logger'\n\nconst logger = new Logger()\n\nif (cluster.isMaster) {\n  logger.debug('MASTER')\n  let spawnWorker = (count = 0) => {\n    if (count === os.cpus().length) return\n    const worker = cluster.fork({ shardID: count, shardCount: os.cpus().length })\n    worker.once('online', () => {\n      logger.debug(`WORKER ${worker.process.pid}: Shard ${count}`)\n    })\n    worker.once('message', msg => {\n      if (msg === 'loaded:shard') setTimeout(() => spawnWorker(++count), 2000)\n    })\n  }\n  spawnWorker()\n} else {\n  let Tatsumaki = new Bot({\n    shardID: parseInt(process.env.shardID, 10),\n    shardCount: parseInt(process.env.shardCount, 10)\n  })\n  Tatsumaki.run()\n\n  Tatsumaki.once('loaded:discord', () => process.send('loaded:shard'))\n\n  module.exports = Tatsumaki\n}\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/iris/src"}