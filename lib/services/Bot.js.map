{"version":3,"sources":["services/Bot.js"],"names":[],"mappings":"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","file":"services/Bot.js","sourcesContent":["import { Client as Discord } from 'discord.js'\nimport { EventEmitter } from 'events'\nimport path from 'path'\nimport chalk from 'chalk'\nimport rq from 'require-all'\nimport cr from 'clear-require'\n\nimport Logger from './Logger'\nimport Configs from './Configurator'\n\nclass Bot extends EventEmitter {\n  constructor (options) {\n    options = options || {}\n    super()\n    this.logger = new Logger('BOT')\n    this.configPath = options.configPath || path.join(process.cwd(), 'config')\n    this.pluginsPath = options.pluginsPath || path.join(process.cwd(), 'lib/plugins')\n    this.dbPath = options.dbPath || path.join(process.cwd(), 'db')\n    this.shardID = options.shardID || 0\n    this.shardCount = options.shardCount || 1\n\n    this.once('loaded:configs', () => this.login())\n    this.once('loaded:discord', () => this.attachPlugins())\n    this.on('loaded:plugins', () => this.runPlugins())\n    this.on('clear:plugins', () => this.attachPlugins())\n  }\n\n  run () {\n    Configs.get(this.configPath, results => {\n      this.config = results\n      this.emit('loaded:configs')\n    })\n  }\n\n  login () {\n    if (typeof this.config.token === 'undefined') {\n      throw new Error('Unable to resolve Discord token')\n    }\n\n    let client = new Discord({\n      maxCachedMessages: 10,\n      forceFetchUsers: true,\n      disableEveryone: true,\n      shardId: this.shardID,\n      shardCount: this.shardCount\n    })\n\n    client.on('ready', () => {\n      this.emit('loaded:discord')\n      this.logger.info(`${chalk.red.bold('iris')} is ready! Logging in as ${chalk.cyan.bold(client.user.name)}`)\n      this.logger.info(`Listening to ${chalk.magenta.bold(client.channels.length)} channels, on ${chalk.green.bold(client.servers.length)} servers`)\n    })\n\n    client.on('message', msg => {\n      if (msg.content.startsWith(this.config.prefix)) {\n        this.logger.heard(msg)\n        const trigger = msg.content.toLowerCase().split(' ')[0].substring(this.config.prefix.length)\n        const args = msg.content.toLowerCase().split(' ').splice(1)\n        this.emit(trigger, args, msg, client)\n      }\n    })\n\n    client.loginWithToken(this.config.token)\n    this.client = client\n  }\n\n  attachPlugins () {\n    this.plugins = rq(this.pluginsPath)\n    this.emit('loaded:plugins')\n  }\n\n  runPlugins () {\n    for (let mod in this.plugins) {\n      for (let command in this.plugins[mod]) {\n        this.plugins[mod][command] = new this.plugins[mod][command]()\n      }\n    }\n  }\n\n  reloadPlugins () {\n    Object.keys(require.cache).forEach(key => {\n      if (key.startsWith(path.join(process.cwd(), 'plugins'))) cr(key)\n    })\n    this.emit('clear:plugins')\n    this.attachPlugins()\n  }\n}\n\nmodule.exports = Bot\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/iris/src"}