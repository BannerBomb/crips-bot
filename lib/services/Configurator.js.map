{"version":3,"sources":["services/Configurator.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAM,SAAS,sBAAf;;AAEA,SAAS,YAAT,CAAuB,UAAvB,EAAmC,QAAnC,EAA6C;AAC3C,kBAAM,SAAN,CAAgB,CACd,cAAM;AACJ,iBAAG,OAAH,CAAW,UAAX,EAAuB,UAAC,GAAD,EAAM,SAAN,EAAoB;AACzC,UAAI,GAAJ,EAAS,OAAO,GAAG,GAAH,CAAP;AACT,aAAO,GAAG,IAAH,EAAS,SAAT,CAAP;AACD,KAHD;AAID,GANa,EAOd,UAAC,SAAD,EAAY,EAAZ,EAAmB;AACjB,qBAAE,MAAF,CAAS,SAAT,EAAoB;AAAA,aAAK,EAAE,UAAF,CAAa,GAAb,KAAqB,EAAE,OAAF,CAAU,SAAV,IAAuB,CAAC,CAAlD;AAAA,KAApB;AACA,gBAAY,UAAU,GAAV,CAAc;AAAA,aAAK,eAAK,IAAL,CAAU,UAAV,EAAsB,CAAtB,CAAL;AAAA,KAAd,CAAZ;AACA,oBAAM,GAAN,CAAU,SAAV,EAAqB,mBAAS,QAA9B,EAAwC,UAAC,GAAD,EAAM,OAAN,EAAkB;AACxD,UAAI,GAAJ,EAAS,OAAO,GAAG,GAAH,CAAP;AACT,aAAO,GAAG,IAAH,EAAS,OAAT,EAAkB,SAAlB,CAAP;AACD,KAHD;AAID,GAda,CAAhB,EAeG,UAAC,GAAD,EAAM,OAAN,EAAe,KAAf,EAAyB;AAC1B,QAAI,GAAJ,EAAS;AACP,aAAO,KAAP,CAAa,kCAAkC,GAA/C;AACA;AACD;AACD,QAAI,QAAQ,EAAZ;;AAEA,YAAQ,OAAR,CAAgB;AAAA,aAAO,OAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAC,GAAD;AAAA,eAAS,MAAM,GAAN,IAAa,IAAI,GAAJ,CAAtB;AAAA,OAAzB,CAAP;AAAA,KAAhB;AACA,WAAO,SAAS,KAAT,CAAP;AACD,GAxBD;AAyBD;;AAED,OAAO,OAAP,GAAiB;AACf,OAAK;AADU,CAAjB","file":"services/Configurator.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport async from 'async'\nimport jsonfile from 'jsonfile'\n\nimport Logger from './Logger'\n\nconst logger = new Logger()\n\nfunction fetchConfigs (configPath, callback) {\n  async.waterfall([\n    cb => {\n      fs.readdir(configPath, (err, filenames) => {\n        if (err) return cb(err)\n        return cb(null, filenames)\n      })\n    },\n    (filenames, cb) => {\n      _.remove(filenames, n => n.startsWith('.') || n.indexOf('example') > -1)\n      filenames = filenames.map(n => path.join(configPath, n))\n      async.map(filenames, jsonfile.readFile, (err, results) => {\n        if (err) return cb(err)\n        return cb(null, results, filenames)\n      })\n    }\n  ], (err, results, names) => {\n    if (err) {\n      logger.error('Unable to load config files: ' + err)\n      return\n    }\n    let reply = {}\n    // names.forEach(n => logger.info(`Loaded config: ${n}`))\n    results.forEach(obj => Object.keys(obj).forEach((key) => reply[key] = obj[key]))\n    return callback(reply)\n  })\n}\n\nmodule.exports = {\n  get: fetchConfigs\n}\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/iris/src"}